import React, { useEffect, useState } from "react";

function Countdown({ onFinish, showHearts, heartsHidden }) {
  const targetDate = new Date("2025-02-18T00:00:00").getTime(); // –î–∞—Ç–∞ –≥–æ–¥–æ–≤—â–∏–Ω—ã
  const [timeLeft, setTimeLeft] = useState(targetDate - Date.now());
  const [isToday, setIsToday] = useState(false); // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
  const [isPast, setIsPast] = useState(false); // –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
  const [hearts, setHearts] = useState([]); // –°–µ—Ä–¥–µ—á–∫–∏

  // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
  useEffect(() => {
    const now = Date.now();

    if (now < targetDate) {
      const timer = setInterval(() => {
        const timeRemaining = targetDate - Date.now();
        if (timeRemaining <= 0) {
          clearInterval(timer);
          setIsToday(true); // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        } else {
          setTimeLeft(timeRemaining);
        }
      }, 1000);

      return () => clearInterval(timer);
    } else if (now >= targetDate && now < targetDate + 24 * 60 * 60 * 1000) {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
      setIsToday(true);
    } else {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
      setIsPast(true);
    }
  }, [targetDate]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–¥–µ—á–µ–∫
  useEffect(() => {
    if (showHearts) {
      const emojiHearts = ["‚ù§Ô∏è", "üíï", "üíñ", "üíò", "üíó", "üíì", "üíû"];

      const generateHearts = (count) => {
        return Array.from({ length: count }, (_, index) => {
          const randomLeft = Math.random() * 100;
          const randomDelay = Math.random() * 5;
          const randomDuration = Math.random() * 5 + 3;
          const randomSize = Math.random() * 20 + 10;
          const randomEmoji =
            emojiHearts[Math.floor(Math.random() * emojiHearts.length)];

          return (
            <div
              key={index}
              className={`heart`}
              style={{
                left: `${randomLeft}%`,
                animationDelay: `${randomDelay}s`,
                animationDuration: `${randomDuration}s`,
                fontSize: `${randomSize}px`,
                top: "-100px",
                opacity: heartsHidden ? 0 : 1,
                transition: "opacity 1.5s ease",
              }}
            >
              {randomEmoji}
            </div>
          );
        });
      };

      setHearts(generateHearts(50));
    } else {
      setHearts([]);
    }
  }, [showHearts, heartsHidden]);

  const formatTime = (time) => {
    const days = Math.floor(time / (1000 * 60 * 60 * 24));
    const hours = Math.floor((time / (1000 * 60 * 60)) % 24);
    const minutes = Math.floor((time / (1000 * 60)) % 60);
    const seconds = Math.floor((time / 1000) % 60);
    return `${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å`;
  };

  const getDaysAgo = () => {
    const days = Math.floor((Date.now() - targetDate) / (1000 * 60 * 60 * 24));
    return days;
  };

  const handleSkipToTasks = () => {
    setIsPast(false); // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–æ—à–ª–æ–≥–æ"
    onFinish(); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º
  };

  useEffect(() => {
    if (isToday) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
      const timer = setTimeout(() => {
        onFinish();
      }, 8000);

      return () => clearTimeout(timer); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    }
  }, [isToday, onFinish]);

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
  if (isPast) {
    return (
      <div style={{ textAlign: "center", padding: "20px" }}>
        <h1 style={styles.header}>
          –ù–∞—à–∞ –≥–æ–¥–æ–≤—â–∏–Ω–∞ –±—ã–ª–∞ {getDaysAgo()} –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        </h1>
        <button
          onClick={handleSkipToTasks}
          style={styles.button}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º
        </button>
      </div>
    );
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
  if (isToday) {
    return (
      <div style={{ position: "relative", overflow: "hidden", textAlign: "center" }}>
        <h1 style={styles.header}>
          –ù–∞—à–∞ –≥–æ–¥–æ–≤—â–∏–Ω–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!
        </h1>
        <p style={styles.subheader}>
          –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ —Å—é—Ä–ø—Ä–∏–∑—É...
        </p>
        {showHearts && <div className="heart-container">{hearts}</div>}
      </div>
    );
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞
  return (
    <div
      style={{
        position: "relative",
        overflow: "hidden",
        textAlign: "center",
        padding: "20px",
      }}
    >
      <h1 style={styles.header}>
        –î–æ –Ω–∞—à–µ–π –≥–æ–¥–æ–≤—â–∏–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å:
      </h1>
      <p style={styles.timer}>
        {formatTime(timeLeft)}
      </p>
      {showHearts && <div className="heart-container">{hearts}</div>}
    </div>
  );
}

const styles = {
  header: {
    fontSize: "36px",
    marginBottom: "10px",
    color: "white",
    textShadow: "2px 2px 4px black", // –ß—ë—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ —Ç–µ–∫—Å—Ç–∞
    fontFamily: "'Pacifico', cursive", // –ö—Ä–∞—Å–∏–≤—ã–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç
  },
  subheader: {
    fontSize: "20px",
    marginBottom: "30px",
    color: "white",
    textShadow: "1px 1px 3px black",
    fontFamily: "'Roboto', sans-serif",
  },
  timer: {
    fontSize: "48px",
    fontWeight: "bold",
    color: "white",
    textShadow: "2px 2px 6px black",
    fontFamily: "'Roboto Mono', monospace", // –ú–æ–Ω–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  },
  button: {
    padding: "10px 20px",
    fontSize: "16px",
    borderRadius: "5px",
    backgroundColor: "#ff6f61",
    color: "#fff",
    border: "none",
    cursor: "pointer",
  },
};

export default Countdown;
