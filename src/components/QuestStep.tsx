import React, { useState } from "react";

function QuestStep() {
  const [isIntroSlide, setIsIntroSlide] = useState(true); // –î–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);
  const [inputValue, setInputValue] = useState("");
  const [showInput, setShowInput] = useState(false); // –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
  const [isError, setIsError] = useState(false); // –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä—è—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
  const [isFinalSlide, setIsFinalSlide] = useState(false); // –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const [secretMessage, setSecretMessage] = useState(""); // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

  const tasks = [
    {
      title: "–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!",
      description: "–ù–∞–π–¥–∏ –ø–∏—Å—å–º–æ, —Å–ø—Ä—è—Ç–∞–Ω–Ω–æ–µ –ø–æ–¥ –ø–æ–¥—É—à–∫–æ–π.",
      key: "love2025",
      secretMessage: "–¢—ã –Ω–∞—à–ª–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ! –Ø —Ç–µ–±—è –ª—é–±–ª—é ‚ù§Ô∏è",
    },
    {
      title: "–í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
      description: "–ü–æ–¥–æ–π–¥–∏ –∫ –æ–∫–Ω—É –∏ —Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ...",
      key: "window2025",
      secretMessage: "–¢—ã –∑–∞–º–µ—á–∞–µ—à—å –∑–≤—ë–∑–¥—ã? –û–Ω–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã, –∫–∞–∫ –∏ —Ç—ã ‚ú®",
    },
    {
      title: "–¢—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ",
      description: "–ù–∞–π–¥–∏ —à–æ–∫–æ–ª–∞–¥–∫—É –Ω–∞ –∫—É—Ö–Ω–µ üç´",
      key: "sweet2025",
      secretMessage: "–¢—ã –∑–∞—Å–ª—É–∂–∏–ª–∞ —ç—Ç–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è üç´‚ù§Ô∏è",
    },
  ];

  const currentTask = tasks[currentTaskIndex];

  const handleCheckKey = () => {
    const reversedKey = currentTask.key.split("").reverse().join("");

    if (inputValue.trim() === reversedKey) {
      // –ï—Å–ª–∏ –∫–ª—é—á –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä—ë–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setSecretMessage(currentTask.secretMessage);
    } else if (inputValue.trim() === currentTask.key) {
      // –£—Å–ø–µ—Ö: –≤–∫–ª—é—á–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
      document.body.style.boxShadow =
        "0 0 40px 20px #ff91a4, inset 0 0 40px 20px #ff6f61";

      setTimeout(() => {
        document.body.style.boxShadow = ""; // –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ
        setInputValue(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        setSecretMessage(""); // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setShowInput(false); // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (currentTaskIndex < tasks.length - 1) {
          setCurrentTaskIndex(currentTaskIndex + 1); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
        } else {
          setIsFinalSlide(true); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        }
      }, 1500);
    } else {
      // –û—à–∏–±–∫–∞: —Ç—Ä—è—Å—ë–º –∫–Ω–æ–ø–∫—É
      setIsError(true); // –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
      setTimeout(() => {
        setIsError(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      }, 1000);
    }
  };

  if (isIntroSlide) {
    return (
      <div
        style={{
          padding: "20px",
          textAlign: "center",
          maxWidth: "90%", // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
          margin: "0 auto", // –¶–µ–Ω—Ç—Ä–æ–≤–∫–∞
        }}
      >
        <h1 style={{ fontSize: "24px", marginBottom: "10px" }}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
        <p style={{ fontSize: "18px", marginBottom: "20px" }}>
          –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π. –ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É, 
          –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É. –í–≤–æ–¥–∏ –∫–ª—é—á –≤ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. 
          –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî —Ç–µ–±—è –∂–¥—ë—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
        </p>
        <button
          onClick={() => setIsIntroSlide(false)}
          style={{
            padding: "10px 20px",
            fontSize: "16px",
            borderRadius: "5px",
            backgroundColor: "#ff6f61",
            color: "#fff",
            border: "none",
            cursor: "pointer",
          }}
        >
          –Ø –ø–æ–Ω—è–ª–∞
        </button>
      </div>
    );
  }

  if (isFinalSlide) {
    return (
      <div
        style={{
          padding: "20px",
          textAlign: "center",
          maxWidth: "90%", // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
          margin: "0 auto",
        }}
      >
        <h1 style={{ fontSize: "24px", marginBottom: "10px" }}>
          –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!
        </h1>
        <p style={{ fontSize: "18px" }}>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
      </div>
    );
  }

  return (
    <div
      style={{
        padding: "20px",
        textAlign: "center",
        maxWidth: "50%", // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
        minWidth: "500px",
        margin: "0 auto", // –¶–µ–Ω—Ç—Ä–æ–≤–∫–∞
      }}
    >
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è */}
      <h1 style={{ fontSize: "24px", marginBottom: "10px" }}>{currentTask.title}</h1>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      <p style={{ fontSize: "18px", marginBottom: "20px" }}>
        {secretMessage || currentTask.description}
      </p>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      {showInput || secretMessage ? (
        <div style={{ marginTop: "20px" }}>
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á"
            style={{
              padding: "10px",
              fontSize: "16px",
              borderRadius: "5px",
              border: "2px solid #ccc",
              width: "200px",
              marginRight: "10px",
              transition: "border-color 0.3s",
            }}
          />
          <button
            onClick={handleCheckKey}
            className={`task-button ${isError ? "error" : ""}`}
            style={{
              padding: "10px 20px",
              fontSize: "16px",
              borderRadius: "5px",
              backgroundColor: isError ? "#ff6f6f" : "#ff6f61",
              color: "#fff",
              border: "none",
              cursor: "pointer",
              animation: isError ? "shake 0.5s" : "none",
            }}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á
          </button>
        </div>
      ) : (
        <button
          onClick={() => setShowInput(true)}
          className={`task-button ${isError ? "error" : ""}`}
          style={{
            marginTop: "20px",
            padding: "10px 20px",
            fontSize: "16px",
            borderRadius: "5px",
            backgroundColor: isError ? "#ff6f6f" : "#ff6f61",
            color: "#fff",
            border: "none",
            cursor: "pointer",
            animation: isError ? "shake 0.5s" : "none",
          }}
        >
          –í—ã–ø–æ–ª–Ω–∏–ª–∞
        </button>
      )}
    </div>
  );
}

export default QuestStep;


